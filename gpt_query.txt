flask_app/models.py
``` python
import os
from datetime import datetime, timezone
from dotenv import load_dotenv
from werkzeug.security import generate_password_hash, check_password_hash

from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy import Interval

from app import db, create_app

load_dotenv()

# ------------------------------------------------
# Enrollments Table
# ------------------------------------------------
class Enrollment(db.Model):
    __tablename__ = 'enrollments'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    
    telegram_id = db.Column(db.String(100), nullable=True, unique=False)
    telegram_link_code = db.Column(db.String(255), nullable=True)
    telegram_link_code_expire_ts = db.Column(db.DateTime(timezone=True), nullable=True)
    telegram_link_code_used = db.Column(db.Boolean, default=False, nullable=False)
    
    tz = db.Column(db.String(50), nullable=False)
    study_id = db.Column(db.Integer, db.ForeignKey('studies.id'), nullable=False)
    study_pid = db.Column(db.String(255), nullable=False)  # Participant ID in the study assigned by researcher
    enrolled = db.Column(db.Boolean, default=True, nullable=False)
    start_date = db.Column(db.DateTime(timezone=True), nullable=False)
    pr_completed = db.Column(db.Float, default=0.0)
    
    dashboard_otp = db.Column(db.String(255), nullable=True)
    dashboard_otp_expire_ts = db.Column(db.DateTime(timezone=True), nullable=True)
    dashboard_otp_used = db.Column(db.Boolean, default=False, nullable=False)
    
    created_at = db.Column(db.DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), nullable=False)
    updated_at = db.Column(db.DateTime(timezone=True), onupdate=lambda: datetime.now(timezone.utc))

    # Relationships
    pings = db.relationship("Ping", back_populates="enrollment")
    study = db.relationship("Study", back_populates="enrollments")
    
    def to_dict(self):
        return {
            'id': self.id,
            'telegram_id': self.telegram_id,
            'telegram_link_code': self.telegram_link_code,
            'telegram_link_code_expire_ts': self.telegram_link_code_expire_ts.isoformat() if self.telegram_link_code_expire_ts else None,
            'telegram_link_code_used': self.telegram_link_code_used,
            'tz': self.tz,
            'study_id': self.study_id,
            'study_pid': self.study_pid,
            'enrolled': self.enrolled,
            'start_date': self.start_date.isoformat() if self.start_date else None,
            'pr_completed': self.pr_completed,
            'dashboard_otp': self.dashboard_otp,
            'dashboard_otp_expire_ts': self.dashboard_otp_expire_ts.isoformat() if self.dashboard_otp_expire_ts else None,
            'dashboard_otp_used': self.dashboard_otp_used,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
        }
    

# ------------------------------------------------
# UserStudy Table (Users â†” Studies with attributes)
# ------------------------------------------------
class UserStudy(db.Model):
    __tablename__ = 'user_studies'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    study_id = db.Column(db.Integer, db.ForeignKey('studies.id'), nullable=False)
    role = db.Column(db.String(255), nullable=False)  # e.g. 'owner': sharing + editing + viewing, 'editor': editing + viewing, 'viewer': viewing only
    created_at = db.Column(db.DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), nullable=False)
    updated_at = db.Column(db.DateTime(timezone=True), onupdate=lambda: datetime.now(timezone.utc))

    # Relationships
    user = db.relationship("User", back_populates="user_studies")
    study = db.relationship("Study", back_populates="user_studies")
    
    def to_dict(self):
        return {
            'id': self.id,
            'user_id': self.user_id,
            'study_id': self.study_id,
            'role': self.role,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
        }

# ------------------------------------------------
# Users Table
# ------------------------------------------------
class User(db.Model):
    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    email = db.Column(db.String(255), nullable=False, unique=True)
    password = db.Column(db.String(255), nullable=False)
    first_name = db.Column(db.String(100))
    last_name = db.Column(db.String(100))
    institution = db.Column(db.String(255))
    prolific_token = db.Column(db.String(255))
    last_login = db.Column(db.DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    created_at = db.Column(db.DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), nullable=False)
    updated_at = db.Column(db.DateTime(timezone=True), onupdate=lambda: datetime.now(timezone.utc))

    # Many-to-many relationship with Study
    user_studies = db.relationship(
        "UserStudy",
        back_populates="user"
    )

    def set_password(self, password):
        """Hash and set the user's password."""
        self.password = generate_password_hash(password)
        
    def check_password(self, password):
        """Check if the provided password matches the stored hash."""
        return check_password_hash(self.password, password)
    
    def to_dict(self):
        return {
            'id': self.id,
            'email': self.email,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'institution': self.institution,
            'last_login': self.last_login.isoformat() if self.last_login else None,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
        }

# ------------------------------------------------
# Studies Table
# ------------------------------------------------
class Study(db.Model):
    __tablename__ = 'studies'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    public_name = db.Column(db.String(255), nullable=False)
    internal_name = db.Column(db.String(255), nullable=False)
    code = db.Column(db.String(255), nullable=False, unique=True)
    contact_message = db.Column(db.Text)  # e.g., "Please contact the study team for any questions or concerns by emailing ashm@stanford.edu."
    created_at = db.Column(db.DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), nullable=False)
    updated_at = db.Column(db.DateTime(timezone=True), onupdate=lambda: datetime.now(timezone.utc))

    # Relationships
    ping_templates = db.relationship("PingTemplate", back_populates="study")
    pings = db.relationship("Ping", back_populates="study")
    enrollments = db.relationship(
        "Enrollment",
        back_populates="study"
    )
    user_studies = db.relationship(
        "UserStudy",
        back_populates="study"
    ) 
    
    def to_dict(self):
        return {
            'id': self.id,
            'public_name': self.public_name,
            'internal_name': self.internal_name,
            'code': self.code,
            'contact_message': self.contact_message,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
        }
    
# ------------------------------------------------
# PingTemplates Table
# ------------------------------------------------
class PingTemplate(db.Model):
    __tablename__ = 'ping_templates'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    study_id = db.Column(db.Integer, db.ForeignKey('studies.id'), nullable=False)
    name = db.Column(db.String(255), nullable=False)
    message = db.Column(db.Text, nullable=False)
    url = db.Column(db.String(255))  # e.g., "https://qualtrics.com/survey"
    url_text = db.Column(db.String(255))  # e.g., "Click here to take the survey."
    reminder_latency = db.Column(Interval)  # e.g., '1 hour', '30 minutes'
    expire_latency = db.Column(Interval)    # e.g., '24 hours'
    schedule = db.Column(JSONB, nullable=True)  # e.g.,  [{"start_day_num": 1, "start_time": "09:00", "end_day_num": 1, "end_time": "10:00"}, {"day_num": 2, "start_time": "09:00", "end_time": "10:00"}]
    created_at = db.Column(db.DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), nullable=False)
    updated_at = db.Column(db.DateTime(timezone=True), onupdate=lambda: datetime.now(timezone.utc))

    # Relationships
    study = db.relationship("Study", back_populates="ping_templates")
    pings = db.relationship("Ping", back_populates="ping_template")
    
    def to_dict(self):
        return {
            'id': self.id,
            'study_id': self.study_id,
            'name': self.name,
            'message': self.message,
            'url': self.url,
            'url_text': self.url_text,
            'reminder_latency': str(self.reminder_latency),
            'expire_latency': str(self.expire_latency),
            'schedule': self.schedule,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
        }

# ------------------------------------------------
# Pings Table
# ------------------------------------------------
class Ping(db.Model):
    __tablename__ = 'pings'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    study_id = db.Column(db.Integer, db.ForeignKey('studies.id'), nullable=False)
    ping_template_id = db.Column(db.Integer, db.ForeignKey('ping_templates.id'), nullable=False)
    enrollment_id = db.Column(db.Integer, db.ForeignKey('enrollments.id'), nullable=False)
    
    scheduled_ts = db.Column(db.DateTime(timezone=True), nullable=False)
    expire_ts = db.Column(db.DateTime(timezone=True))
    reminder_ts = db.Column(db.DateTime(timezone=True))
    ping_sent = db.Column(db.Boolean, nullable=False, default=False)
    reminder_sent = db.Column(db.Boolean, nullable=False, default=False)
    
    forwarding_code = db.Column(db.String(255), nullable=False, default=lambda: os.urandom(16).hex())
    
    day_num = db.Column(db.Integer, nullable=False)
    
    message = db.Column(db.Text, nullable=False)
    url = db.Column(db.String(255), nullable=True)
    
    created_at = db.Column(db.DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), nullable=False)
    updated_at = db.Column(db.DateTime(timezone=True), onupdate=lambda: datetime.now(timezone.utc))

    # Relationships
    study = db.relationship("Study", back_populates="pings")
    ping_template = db.relationship("PingTemplate", back_populates="pings")
    enrollment = db.relationship("Enrollment", back_populates="pings")
    # participant = db.relationship("Participant", back_populates="pings")
    
    def to_dict(self):
        return {
            'id': self.id,
            'study_id': self.study_id,
            'ping_template_id': self.ping_template_id,
            'enrollment_id': self.enrollment_id,
            'scheduled_ts': self.scheduled_ts.isoformat() if self.scheduled_ts else None,
            'expire_ts': self.expire_ts.isoformat() if self.expire_ts else None,
            'reminder_ts': self.reminder_ts.isoformat() if self.reminder_ts else None,
            'day_num': self.day_num,
            'message': self.message,
            'url': self.url,
            'ping_sent': self.ping_sent,
            'reminder_sent': self.reminder_sent,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
        }
```

react_frontend/src/pages/PingTemplateDashboard.js
```
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import StudyNav from '../components/StudyNav';
import axios from '../api/axios'; // your configured axios instance

function PingTemplateDashboard() {
  // -----------------------------------------
  // Get studyId from the URL parameter
  // -----------------------------------------
  const { studyId } = useParams();

  // -----------------------------------------
  // State
  // -----------------------------------------
  const [pingTemplates, setPingTemplates] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Pagination
  const [page, setPage] = useState(1);
  const [perPage] = useState(5);
  const [totalPages, setTotalPages] = useState(1);

  // Form fields for creating a new Ping Template
  const [name, setName] = useState('');
  const [message, setMessage] = useState('');
  const [url, setUrl] = useState('');
  const [reminderLatency, setReminderLatency] = useState('');
  const [expireLatency, setExpireLatency] = useState('');
  const [schedule, setSchedule] = useState('');

  // Toggle for "Create Ping Template" form
  const [showCreateForm, setShowCreateForm] = useState(false);

  // -----------------------------------------
  // Fetch ping templates whenever page or studyId changes
  // -----------------------------------------
  useEffect(() => {
    if (studyId) {
      fetchPingTemplates(studyId, page, perPage);
    }
    // eslint-disable-next-line
  }, [page, studyId]);

  // -----------------------------------------
  // API call to GET ping templates
  // -----------------------------------------
  const fetchPingTemplates = async (studyId, currentPage, itemsPerPage) => {
    setLoading(true);
    setError(null);

    try {
      const response = await axios.get(
        `/studies/${studyId}/ping_templates?page=${currentPage}&per_page=${itemsPerPage}`
      );
      const { data, meta } = response.data;

      setPingTemplates(data);
      setPage(meta.page);
      setTotalPages(meta.pages);
    } catch (err) {
      console.error(err);
      setError('Error fetching ping templates');
    } finally {
      setLoading(false);
    }
  };

  // -----------------------------------------
  // Handle creating a new ping template
  // -----------------------------------------
  const handleCreatePingTemplate = async (e) => {
    e.preventDefault();

    try {
      // If the user typed JSON for schedule, parse it
      const scheduleParsed = schedule ? JSON.parse(schedule) : null;

      await axios.post(`/studies/${studyId}/ping_templates`, {
        name,
        message,
        url,
        reminder_latency: reminderLatency,
        expire_latency: expireLatency,
        schedule: scheduleParsed,
      });

      // Reset form fields
      setName('');
      setMessage('');
      setUrl('');
      setReminderLatency('');
      setExpireLatency('');
      setSchedule('');

      // Hide the form
      setShowCreateForm(false);

      // Re-fetch ping templates
      fetchPingTemplates(studyId, page, perPage);
    } catch (err) {
      console.error(err);
      setError('Error creating ping template');
    }
  };

  // -----------------------------------------
  // Simple pagination handlers
  // -----------------------------------------
  const handlePreviousPage = () => {
    if (page > 1) {
      setPage((prev) => prev - 1);
    }
  };

  const handleNextPage = () => {
    if (page < totalPages) {
      setPage((prev) => prev + 1);
    }
  };

  // -----------------------------------------
  // Render fallback if studyId is missing
  // -----------------------------------------
  if (!studyId) {
    return <div>Error: Missing studyId in the URL.</div>;
  }

  // -----------------------------------------
  // Render
  // -----------------------------------------
  return (
    <div style={{ margin: '2rem' }}>
      <StudyNav />
      <h1>Ping Templates for Study #{studyId}</h1>

      <button
        style={{ marginBottom: '1rem' }}
        onClick={() => setShowCreateForm(!showCreateForm)}
      >
        {showCreateForm ? 'Cancel' : 'Create New Ping Template'}
      </button>

      {showCreateForm && (
        <section style={{ marginBottom: '2rem' }}>
          <h2>Create a New Ping Template</h2>
          <form onSubmit={handleCreatePingTemplate} style={{ maxWidth: '400px' }}>
            <div style={{ marginBottom: '1rem' }}>
              <label htmlFor="name">Name</label>
              <br />
              <input
                id="name"
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
              />
            </div>

            <div style={{ marginBottom: '1rem' }}>
              <label htmlFor="message">Message</label>
              <br />
              <textarea
                id="message"
                rows={4}
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                required
              />
            </div>

            <div style={{ marginBottom: '1rem' }}>
              <label htmlFor="url">URL</label>
              <br />
              <input
                id="url"
                type="text"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
              />
            </div>

            <div style={{ marginBottom: '1rem' }}>
              <label htmlFor="reminder">
                Reminder Latency (e.g. 1 hour, 30 minutes)
              </label>
              <br />
              <input
                id="reminder"
                type="text"
                value={reminderLatency}
                onChange={(e) => setReminderLatency(e.target.value)}
              />
            </div>

            <div style={{ marginBottom: '1rem' }}>
              <label htmlFor="expire">Expire Latency (e.g. 24 hours)</label>
              <br />
              <input
                id="expire"
                type="text"
                value={expireLatency}
                onChange={(e) => setExpireLatency(e.target.value)}
              />
            </div>

            <div style={{ marginBottom: '1rem' }}>
              <label htmlFor="schedule">Schedule (JSON)</label>
              <br />
              <textarea
                id="schedule"
                rows={4}
                value={schedule}
                onChange={(e) => setSchedule(e.target.value)}
                placeholder='e.g. [{"day":1,"time":"09:00:00"}]'
              />
            </div>

            <button type="submit">Create Ping Template</button>
          </form>
        </section>
      )}

      <section>
        <h2>Your Ping Templates</h2>
        {loading && <p>Loading ping templates...</p>}
        {error && <p style={{ color: 'red' }}>{error}</p>}

        {!loading && !error && (
          <>
            {pingTemplates.length === 0 ? (
              <p>No ping templates found.</p>
            ) : (
              <table
                border="1"
                cellPadding="8"
                style={{ borderCollapse: 'collapse' }}
              >
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Message</th>
                    <th>URL</th>
                    <th>Reminder Latency</th>
                    <th>Expire Latency</th>
                    <th>Schedule</th>
                  </tr>
                </thead>
                <tbody>
                  {pingTemplates.map((pt) => (
                    <tr key={pt.id}>
                      <td>{pt.id}</td>
                      <td>{pt.name}</td>
                      <td>{pt.message}</td>
                      <td>{pt.url}</td>
                      <td>{pt.reminder_latency}</td>
                      <td>{pt.expire_latency}</td>
                      <td>{JSON.stringify(pt.schedule)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </>
        )}

        {/* Simple Pagination Controls */}
        <div style={{ marginTop: '1rem' }}>
          <button onClick={handlePreviousPage} disabled={page <= 1}>
            Previous
          </button>
          <span style={{ margin: '0 1rem' }}>
            Page {page} of {totalPages}
          </span>
          <button onClick={handleNextPage} disabled={page >= totalPages}>
            Next
          </button>
        </div>
      </section>
    </div>
  );
}

export default PingTemplateDashboard;```

flask_app/blueprints/pings.py
```
from flask import Blueprint, request, jsonify, current_app
from flask_jwt_extended import jwt_required, get_jwt_identity
from sqlalchemy import or_, and_
from app import db
from models import User, Ping, Study, UserStudy
from permissions import user_has_study_permission, get_current_user

pings_bp = Blueprint('pings', __name__)



@pings_bp.route('/studies/<int:study_id>/pings', methods=['GET'])
@pings_bp.route('/pings', methods=['GET'])
@jwt_required()
def get_pings(study_id=None):
    user = get_current_user()
    if not user:
        return jsonify({"error": "User not found"}), 404

    # pagination
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 10, type=int)

    try:
        if study_id:
            # Verify access
            study = user_has_study_permission(user_id=user.id, 
                                              study_id=study_id, 
                                              minimum_role="viewer")
            if not study:
                return jsonify({"error": f"No access to study {study_id}"}), 403

            query = Ping.query.filter_by(study_id=study.id)
        else:
            # all pings across all studies the user can access
            accessible_studies = (
                db.session.query(UserStudy.study_id)
                .filter(UserStudy.user_id == user.id)
                .subquery()
            )
            query = Ping.query.filter(Ping.study_id.in_(accessible_studies))

        pagination = query.paginate(page=page, per_page=per_page, error_out=False)
        items = []
        for p in pagination.items:
            items.append(p.to_dict())

        return jsonify({
            "data": items,
            "meta": {
                "page": pagination.page,
                "per_page": pagination.per_page,
                "total": pagination.total,
                "pages": pagination.pages
            }
        }), 200
    except Exception as e:
        current_app.logger.error("Error retrieving pings")
        current_app.logger.exception(e)
        return jsonify({"error": "Error retrieving pings"}), 500

@pings_bp.route('/pings', methods=['POST'])
@jwt_required()
def create_ping():
    """
    POST /pings
    Requires study_id. The user must have access to that study.
    Other fields are optional or required based on your model logic.
    """
    user = get_current_user()
    if not user:
        return jsonify({"error": "User not found"}), 404

    data = request.get_json()
    study_id = data.get('study_id')

    # Check user has access to this study
    study = user_has_study_permission(user_id=user.id, study_id=study_id, minimum_role="editor")
    if not study:
        return jsonify({"error": "No access to study"}), 403

    # Required fields for pings
    enrollment_id = data.get('enrollment_id')
    scheduled_ts = data.get('scheduled_ts')  # e.g. "2024-01-01T09:00:00"
    day_num = data.get('day_num')

    if not all([study_id, enrollment_id, scheduled_ts, day_num]):
        return jsonify({"error": "Missing required fields: study_id, enrollment_id, scheduled_ts, day_num"}), 400

    # Optional
    ping_template_id = data.get('ping_template_id')
    message = data.get('message')
    url = data.get('url')
    expire_ts = data.get('expire_ts')
    reminder_ts = data.get('reminder_ts')

    try:
        new_ping = Ping(
            study_id=study_id,
            ping_template_id=ping_template_id,
            enrollment_id=enrollment_id,
            scheduled_ts=scheduled_ts,
            expire_ts=expire_ts,
            reminder_ts=reminder_ts,
            day_num=day_num,
            message=message,
            url=url
        )
        db.session.add(new_ping)
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        current_app.logger.error("Error creating ping")
        current_app.logger.exception(e)
        return jsonify({"error": "Internal server error"}), 500

    current_app.logger.info(f"User {user.email} created a new ping with ID {new_ping.id}.")
    return jsonify({
        "message": "Ping created successfully",
        "ping": {
            "id": new_ping.id,
            "study_id": new_ping.study_id,
            "ping_template_id": new_ping.ping_template_id,
            "enrollment_id": new_ping.enrollment_id,
            "scheduled_ts": new_ping.scheduled_ts.isoformat() if new_ping.scheduled_ts else None,
            "expire_ts": new_ping.expire_ts.isoformat() if new_ping.expire_ts else None,
            "reminder_ts": new_ping.reminder_ts.isoformat() if new_ping.reminder_ts else None,
            "day_num": new_ping.day_num,
            "message": new_ping.message,
            "url": new_ping.url,
            "ping_sent": new_ping.ping_sent,
            "reminder_sent": new_ping.reminder_sent
        }
    }), 201

@pings_bp.route('/studies/<int:study_id>/pings/<int:ping_id>', methods=['GET'])
@jwt_required()
def get_single_ping(study_id, ping_id):
    user = get_current_user()
    if not user:
        return jsonify({"error": "User not found"}), 404

    study = user_has_study_permission(user_id=user.id, study_id=study_id, minimum_role="viewer")
    if not study:
        return jsonify({"error": f"No access to study {study_id}"}), 403

    p = Ping.query.filter_by(id=ping_id, study_id=study.id).first()
    if not p:
        return jsonify({"error": "Ping not found or no access"}), 404

    return jsonify(p.to_dict()), 200

@pings_bp.route('/studies/<int:study_id>/pings', methods=['POST'])
@jwt_required()
def create_ping(study_id):
    user = get_current_user()
    if not user:
        return jsonify({"error": "User not found"}), 404

    study = user_has_study_permission(user_id=user.id, study_id=study_id, minimum_role="editor")
    if not study:
        return jsonify({"error": f"Study {study_id} not found or no access"}), 404

    data = request.get_json()
    # minimal required fields
    enrollment_id = data.get('enrollment_id')
    scheduled_ts = data.get('scheduled_ts')
    day_num = data.get('day_num')

    if not all([enrollment_id, scheduled_ts, day_num]):
        return jsonify({"error": "Missing required fields: enrollment_id, scheduled_ts, day_num"}), 400

    # optional
    ping_template_id = data.get('ping_template_id')
    message = data.get('message')
    url = data.get('url')
    expire_ts = data.get('expire_ts')
    reminder_ts = data.get('reminder_ts')

    try:
        new_ping = Ping(
            study_id=study.id,
            ping_template_id=ping_template_id,
            enrollment_id=enrollment_id,
            scheduled_ts=scheduled_ts,
            expire_ts=expire_ts,
            reminder_ts=reminder_ts,
            day_num=day_num,
            message=message,
            url=url
        )
        db.session.add(new_ping)
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error creating ping in study {study_id}")
        current_app.logger.exception(e)
        return jsonify({"error": "Error creating ping"}), 500

    return jsonify({
        "message": "Ping created successfully",
        "ping": new_ping.to_dict()
    }), 201

@pings_bp.route('/studies/<int:study_id>/pings/<int:ping_id>', methods=['PUT'])
@jwt_required()
def update_ping(study_id, ping_id):
    user = get_current_user()
    if not user:
        return jsonify({"error": "User not found"}), 404

    study = user_has_study_permission(user_id=user.id, study_id=study_id, minimum_role="editor")
    if not study:
        return jsonify({"error": f"No access to study {study_id}"}), 403

    p = Ping.query.filter_by(id=ping_id, study_id=study.id).first()
    if not p:
        return jsonify({"error": "Ping not found or no access"}), 404

    data = request.get_json()
    # update any provided fields
    for field in ["ping_template_id", "enrollment_id", "scheduled_ts", "expire_ts",
                  "reminder_ts", "day_num", "message", "url", "ping_sent", "reminder_sent"]:
        if field in data:
            setattr(p, field, data[field])

    try:
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error updating ping {ping_id} in study {study_id}")
        current_app.logger.exception(e)
        return jsonify({"error": "Error updating ping"}), 500

    return jsonify({"message": "Ping updated", "ping": p.to_dict()}), 200


@pings_bp.route('/studies/<int:study_id>/pings/<int:ping_id>', methods=['DELETE'])
@jwt_required()
def delete_ping(study_id, ping_id):
    user = get_current_user()
    if not user:
        return jsonify({"error": "User not found"}), 404

    study = user_has_study_permission(user_id=user.id, study_id=study_id, minimum_role="editor")
    if not study:
        return jsonify({"error": f"No access to study {study_id}"}), 403

    p = Ping.query.filter_by(id=ping_id, study_id=study.id).first()
    if not p:
        return jsonify({"error": "Ping not found or no access"}), 404

    try:
        db.session.delete(p)
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error deleting ping {ping_id} in study {study_id}")
        current_app.logger.exception(e)
        return jsonify({"error": "Error deleting ping"}), 500

    return jsonify({"message": f"Ping {ping_id} deleted successfully."}), 200```

flask_app/blueprints/enrollments.py
```
from flask import Blueprint, request, g, Response, jsonify, current_app
from flask_jwt_extended import jwt_required, get_jwt_identity
from config import Config
import urllib.parse
from random import randint
from datetime import timedelta, datetime, timezone
import pytz
import secrets


from app import db
from utils import generate_non_confusable_code
from permissions import user_has_study_permission, get_current_user
from models import Study, Enrollment, Ping, PingTemplate, User, UserStudy


enrollments_bp = Blueprint('enrollments', __name__)


@enrollments_bp.route('/studies/<int:study_id>/enrollments', methods=['GET'])
@enrollments_bp.route('/enrollments', methods=['GET'])
@jwt_required()
def get_enrollments(study_id=None):
    user = get_current_user()
    if not user:
        return jsonify({"error": "User not found"}), 404

    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 10, type=int)

    try:
        if study_id:
            study = user_has_study_permission(user_id=user.id, study_id=study_id, minimum_role="viewer")
            if not study:
                return jsonify({"error": f"No access to study {study_id}"}), 403
            query = Enrollment.query.filter_by(study_id=study.id)
        else:
            # fetch all enrollments across studies user can access
            accessible_studies = (
                db.session.query(UserStudy.study_id)
                .filter(UserStudy.user_id == user.id)
                .subquery()
            )
            query = Enrollment.query.filter(Enrollment.study_id.in_(accessible_studies))

        pagination = query.paginate(page=page, per_page=per_page, error_out=False)
        items = [en.to_dict() for en in pagination.items]

        return jsonify({
            "data": items,
            "meta": {
                "page": pagination.page,
                "per_page": pagination.per_page,
                "total": pagination.total,
                "pages": pagination.pages
            }
        }), 200

    except Exception as e:
        current_app.logger.error("Error retrieving enrollments")
        current_app.logger.exception(e)
        return jsonify({"error": "Error retrieving enrollments"}), 500
    

@enrollments_bp.route('/studies/<int:study_id>/enrollments', methods=['POST'])
@jwt_required()
def create_enrollment(study_id):
    user = get_current_user()
    if not user:
        return jsonify({"error": "User not found"}), 404

    study = user_has_study_permission(user_id=user.id, study_id=study_id, minimum_role="editor")
    if not study:
        return jsonify({"error": f"Study {study_id} not found or no access"}), 404

    data = request.get_json()
    # required fields
    tz = data.get('tz')
    study_pid = data.get('study_pid')
    if not all([tz, study_pid]):
        return jsonify({"error": "Missing required fields: tz, study_pid"}), 400

    # optional
    start_date = data.get('start_date', datetime.now(timezone.utc).date())
    enrolled = data.get('enrolled', True)

    try:
        enrollment = Enrollment(
            study_id=study.id,
            tz=tz,
            study_pid=study_pid,
            enrolled=enrolled,
            start_date=start_date
        )
        db.session.add(enrollment)
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error creating enrollment in study {study_id}")
        current_app.logger.exception(e)
        return jsonify({"error": "Error creating enrollment"}), 500

    return jsonify({
        "message": "Enrollment created successfully",
        "enrollment": enrollment.to_dict()
    }), 201


@enrollments_bp.route('/studies/<int:study_id>/enrollments/<int:enrollment_id>', methods=['GET'])
@jwt_required()
def get_single_enrollment(study_id, enrollment_id):
    user = get_current_user()
    if not user:
        return jsonify({"error": "User not found"}), 404

    study = user_has_study_permission(user_id=user.id, study_id=study_id, minimum_role="viewer")
    if not study:
        return jsonify({"error": f"No access to study {study_id}"}), 403

    enrollment = Enrollment.query.filter_by(id=enrollment_id, study_id=study.id).first()
    if not enrollment:
        return jsonify({"error": f"Enrollment {enrollment_id} not found or no access"}), 404

    return jsonify(enrollment.to_dict()), 200


@enrollments_bp.route('/studies/<int:study_id>/enrollments/<int:enrollment_id>', methods=['PUT'])
@jwt_required()
def update_enrollment(study_id, enrollment_id):
    user = get_current_user()
    if not user:
        return jsonify({"error": "User not found"}), 404

    study = user_has_study_permission(user_id=user.id, study_id=study_id, minimum_role="editor")
    if not study:
        return jsonify({"error": f"No access to study {study_id}"}), 403

    enrollment = Enrollment.query.filter_by(id=enrollment_id, study_id=study.id).first()
    if not enrollment:
        return jsonify({"error": f"Enrollment {enrollment_id} not found or no access"}), 404

    data = request.get_json()
    for field in ["telegram_id", "tz", "study_pid", "enrolled", "start_date", "pr_completed"]:
        if field in data:
            setattr(enrollment, field, data[field])

    try:
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error updating enrollment {enrollment_id} in study {study_id}")
        current_app.logger.exception(e)
        return jsonify({"error": "Error updating enrollment"}), 500

    return jsonify({
        "message": "Enrollment updated successfully",
        "enrollment": enrollment.to_dict()
    }), 200


@enrollments_bp.route('/studies/<int:study_id>/enrollments/<int:enrollment_id>', methods=['DELETE'])
@jwt_required()
def delete_enrollment(study_id, enrollment_id):
    user = get_current_user()
    if not user:
        return jsonify({"error": "User not found"}), 404

    study = user_has_study_permission(user_id=user.id, study_id=study_id, minimum_role="editor")
    if not study:
        return jsonify({"error": f"No access to study {study_id}"}), 403

    enrollment = Enrollment.query.filter_by(id=enrollment_id, study_id=study.id).first()
    if not enrollment:
        return jsonify({"error": f"Enrollment {enrollment_id} not found or no access"}), 404

    try:
        db.session.delete(enrollment)
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error deleting enrollment {enrollment_id} in study {study_id}")
        current_app.logger.exception(e)
        return jsonify({"error": "Error deleting enrollment"}), 500

    return jsonify({"message": f"Enrollment {enrollment_id} deleted successfully."}), 200```



- ok now make similar ping dashboard and participant dashboards.
- note that internally i call participant as enrollment, but in the frontend i call it participant.

